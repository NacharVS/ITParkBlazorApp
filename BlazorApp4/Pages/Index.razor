@page "/index"
@inject IJSRuntime runtimeObject
@inject SingletonService qqq


@*<RegComponent RegistrationIsActive="_trigger"></RegComponent>*@
<input @bind-value="someString" />
<input @bind-value="keyValue" />
<button class="btn btn-primary" @onclick="SaveAsync">@qqq.Value</button>

<div class="row alert-danger text-black-50">@someString2</div>
<button class="btn btn-primary" @onclick="LocalStorageLoad">Load</button>



@code{
    private bool _trigger = false;
    LocalStorageService service;

    string keyValue = string.Empty;
    string someString = string.Empty;
    string someString2 = string.Empty;

    public async void SaveAsync()
    {
        await service.SetStringAsync(keyValue, someString);
    }

    public async void LocalStorageLoad()
    {
        someString2 = await service.GetStringAsync(keyValue);
        StateHasChanged();

    }


    private void Change()
    {
        _trigger = !_trigger;
    }

    protected override void OnInitialized() // срабатывает при вызове компонента, до его отрисовки
    {
        service = new LocalStorageService(runtimeObject);
    }

    protected override void OnParametersSet() // срабатывает при изменении значений полей обернутых в атрибут Parameter
    {
        base.OnParametersSet();
    }

    protected override void OnAfterRender(bool firstRender) // Срабатывает полсе полной отрисовки компонента
    {
        base.OnAfterRender(firstRender);
    }
    protected override bool ShouldRender() // запертить или разрешить ПЕРЕРИСОВККУ компонента
    {
        return base.ShouldRender();
    }


}
